syntax = "proto3";

package uber.foo.v1;

option csharp_namespace = "Uber.Foo.V1";
option go_package = "foov1";
option java_multiple_files = true;
option java_outer_classname = "FooProto";
option java_package = "com.uber.foo.v1";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "uber/bar/v1/bar.proto";

// Hello is a hello.
enum Hello {
  HELLO_INVALID = 0;
  HELLO_UNSET = 1;
  HELLO_TREE = 2;
  HELLO_BALLOON = 3;
}

// Foo is a foo.
message Foo {
  // Bar is a bar.
  message Bar {
    // Baz is a baz.
    enum Baz {
      BAZ_INVALID = 0;
    }
    // Bat is a bat.
    enum Bat {
      BAT_INVALID = 0;
    }
    Baz baz = 1;
    Bat bat = 2;
  }
  Bar bar = 1;
}

// Bar is a bar.
enum Bar {
  BAR_INVALID = 0;
}

// Barr is a barr.
message Barr {
  int64 hello = 1;
  google.protobuf.Timestamp barr_time = 2;
  bar.v1.Hello bar_hello = 3;
}

// Another is another message.
message Another {
  int64 one = 1;
  string two = 2;
  Another another = 3;
  repeated string four = 4;
  Hello hello = 5;
  map<string, int64> m = 6;
  oneof oneof_oneof {
    int64 seven = 7;
    string eight = 8;
  }
  repeated Another nine = 9;
  google.protobuf.Duration another_duration = 10;
}

// HasWKT has Well-Known Types.
message HasWKT {
  google.protobuf.Duration wkt_duration = 1;
}

// Bazz is a bazzzz.
message Bazz {}

message BarRequest {
  int64 id = 1;
}

message BarResponse {}

message FooRequest {}

message FooResponse {}

service HelloAPI {
  // Foo does a foo.
  rpc Foo(FooRequest) returns (FooResponse);
  // Bar does a bar.
  rpc Bar(BarRequest) returns (BarResponse);
}

message ExclamationRequest {
  string value = 1;
}

message ExclamationResponse {
  string value = 1;
}

// ExcitedAPI is a service with exciting transformations.
service ExcitedAPI {
  // Exclamation adds an exclamation to the request value.
  rpc Exclamation(ExclamationRequest) returns (ExclamationResponse);
  // ExclamationClientStream adds an exclamation to the combined request values.
  rpc ExclamationClientStream(stream ExclamationRequest) returns (ExclamationResponse);
  // ExclamationServerStream adds an exclamation to the request value
  // and streams each character as a response.
  rpc ExclamationServerStream(ExclamationRequest) returns (stream ExclamationResponse);
  // ExclamationBidiStream adds an exclamation to the each request value.
  rpc ExclamationBidiStream(stream ExclamationRequest) returns (stream ExclamationResponse);
}
