// Code generated by protoc-gen-yarpc-go
// source: foo/foo.proto
// DO NOT EDIT!

package foopb

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/proto"
	"github.com/uber/prototool/example/gen/proto/go/sub"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// HelloServiceYARPCClient is the YARPC client-side interface for the HelloService service.
type HelloServiceYARPCClient interface {
	Foo(context.Context, *subpb.Dep, ...yarpc.CallOption) (*FooResponse, error)
	Bar(context.Context, *BarRequest, ...yarpc.CallOption) (*Dep, error)
}

// NewHelloServiceYARPCClient builds a new YARPC client for the HelloService service.
func NewHelloServiceYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) HelloServiceYARPCClient {
	return &_HelloServiceYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "foo.HelloService",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// HelloServiceYARPCServer is the YARPC server-side interface for the HelloService service.
type HelloServiceYARPCServer interface {
	Foo(context.Context, *subpb.Dep) (*FooResponse, error)
	Bar(context.Context, *BarRequest) (*Dep, error)
}

// BuildHelloServiceYARPCProcedures prepares an implementation of the HelloService service for YARPC registration.
func BuildHelloServiceYARPCProcedures(server HelloServiceYARPCServer) []transport.Procedure {
	handler := &_HelloServiceYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "foo.HelloService",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Foo",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.Foo,
							NewRequest: newHelloServiceServiceFooYARPCRequest,
						},
					),
				},
				{
					MethodName: "Bar",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.Bar,
							NewRequest: newHelloServiceServiceBarYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{},
		},
	)
}

// FxHelloServiceYARPCClientParams defines the input
// for NewFxHelloServiceYARPCClient. It provides the
// paramaters to get a HelloServiceYARPCClient in an
// Fx application.
type FxHelloServiceYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxHelloServiceYARPCClientResult defines the output
// of NewFxHelloServiceYARPCClient. It provides a
// HelloServiceYARPCClient to an Fx application.
type FxHelloServiceYARPCClientResult struct {
	fx.Out

	Client HelloServiceYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxHelloServiceYARPCClient provides a HelloServiceYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    foopb.NewFxHelloServiceYARPCClient("service-name"),
//    ...
//  )
func NewFxHelloServiceYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxHelloServiceYARPCClientParams) FxHelloServiceYARPCClientResult {
		return FxHelloServiceYARPCClientResult{
			Client: NewHelloServiceYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxHelloServiceYARPCProceduresParams defines the input
// for NewFxHelloServiceYARPCProcedures. It provides the
// paramaters to get HelloServiceYARPCServer procedures in an
// Fx application.
type FxHelloServiceYARPCProceduresParams struct {
	fx.In

	Server HelloServiceYARPCServer
}

// FxHelloServiceYARPCProceduresResult defines the output
// of NewFxHelloServiceYARPCProcedures. It provides
// HelloServiceYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxHelloServiceYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxHelloServiceYARPCProcedures provides HelloServiceYARPCServer procedures to an Fx application.
// It expects a HelloServiceYARPCServer to be present in the container.
//
//  fx.Provide(
//    foopb.NewFxHelloServiceYARPCProcedures(),
//    ...
//  )
func NewFxHelloServiceYARPCProcedures() interface{} {
	return func(params FxHelloServiceYARPCProceduresParams) FxHelloServiceYARPCProceduresResult {
		return FxHelloServiceYARPCProceduresResult{
			Procedures: BuildHelloServiceYARPCProcedures(params.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "foo.HelloService",
				FileDescriptors: yarpcFileDescriptorClosurea61802764a7d7e5a,
			},
		}
	}
}

type _HelloServiceYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_HelloServiceYARPCCaller) Foo(ctx context.Context, request *subpb.Dep, options ...yarpc.CallOption) (*FooResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Foo", request, newHelloServiceServiceFooYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*FooResponse)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceServiceFooYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_HelloServiceYARPCCaller) Bar(ctx context.Context, request *BarRequest, options ...yarpc.CallOption) (*Dep, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Bar", request, newHelloServiceServiceBarYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*Dep)
	if !ok {
		return nil, protobuf.CastError(emptyHelloServiceServiceBarYARPCResponse, responseMessage)
	}
	return response, err
}

type _HelloServiceYARPCHandler struct {
	server HelloServiceYARPCServer
}

func (h *_HelloServiceYARPCHandler) Foo(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *subpb.Dep
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*subpb.Dep)
		if !ok {
			return nil, protobuf.CastError(emptyHelloServiceServiceFooYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Foo(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_HelloServiceYARPCHandler) Bar(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *BarRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*BarRequest)
		if !ok {
			return nil, protobuf.CastError(emptyHelloServiceServiceBarYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Bar(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func newHelloServiceServiceFooYARPCRequest() proto.Message {
	return &subpb.Dep{}
}

func newHelloServiceServiceFooYARPCResponse() proto.Message {
	return &FooResponse{}
}

func newHelloServiceServiceBarYARPCRequest() proto.Message {
	return &BarRequest{}
}

func newHelloServiceServiceBarYARPCResponse() proto.Message {
	return &Dep{}
}

var (
	emptyHelloServiceServiceFooYARPCRequest  = &subpb.Dep{}
	emptyHelloServiceServiceFooYARPCResponse = &FooResponse{}
	emptyHelloServiceServiceBarYARPCRequest  = &BarRequest{}
	emptyHelloServiceServiceBarYARPCResponse = &Dep{}
)

// ExcitedServiceYARPCClient is the YARPC client-side interface for the ExcitedService service.
type ExcitedServiceYARPCClient interface {
	Exclamation(context.Context, *ExclamationRequest, ...yarpc.CallOption) (*ExclamationResponse, error)
	ExclamationClientStream(context.Context, ...yarpc.CallOption) (ExcitedServiceServiceExclamationClientStreamYARPCClient, error)
	ExclamationServerStream(context.Context, *ExclamationRequest, ...yarpc.CallOption) (ExcitedServiceServiceExclamationServerStreamYARPCClient, error)
	ExclamationBidiStream(context.Context, ...yarpc.CallOption) (ExcitedServiceServiceExclamationBidiStreamYARPCClient, error)
}

// ExcitedServiceServiceExclamationClientStreamYARPCClient sends ExclamationRequests and receives the single ExclamationResponse when sending is done.
type ExcitedServiceServiceExclamationClientStreamYARPCClient interface {
	Context() context.Context
	Send(*ExclamationRequest, ...yarpc.StreamOption) error
	CloseAndRecv(...yarpc.StreamOption) (*ExclamationResponse, error)
}

// ExcitedServiceServiceExclamationServerStreamYARPCClient receives ExclamationResponses, returning io.EOF when the stream is complete.
type ExcitedServiceServiceExclamationServerStreamYARPCClient interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*ExclamationResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// ExcitedServiceServiceExclamationBidiStreamYARPCClient sends ExclamationRequests and receives ExclamationResponses, returning io.EOF when the stream is complete.
type ExcitedServiceServiceExclamationBidiStreamYARPCClient interface {
	Context() context.Context
	Send(*ExclamationRequest, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*ExclamationResponse, error)
	CloseSend(...yarpc.StreamOption) error
}

// NewExcitedServiceYARPCClient builds a new YARPC client for the ExcitedService service.
func NewExcitedServiceYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) ExcitedServiceYARPCClient {
	return &_ExcitedServiceYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "foo.ExcitedService",
			ClientConfig: clientConfig,
			Options:      options,
		},
	)}
}

// ExcitedServiceYARPCServer is the YARPC server-side interface for the ExcitedService service.
type ExcitedServiceYARPCServer interface {
	Exclamation(context.Context, *ExclamationRequest) (*ExclamationResponse, error)
	ExclamationClientStream(ExcitedServiceServiceExclamationClientStreamYARPCServer) (*ExclamationResponse, error)
	ExclamationServerStream(*ExclamationRequest, ExcitedServiceServiceExclamationServerStreamYARPCServer) error
	ExclamationBidiStream(ExcitedServiceServiceExclamationBidiStreamYARPCServer) error
}

// ExcitedServiceServiceExclamationClientStreamYARPCServer receives ExclamationRequests.
type ExcitedServiceServiceExclamationClientStreamYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*ExclamationRequest, error)
}

// ExcitedServiceServiceExclamationServerStreamYARPCServer sends ExclamationResponses.
type ExcitedServiceServiceExclamationServerStreamYARPCServer interface {
	Context() context.Context
	Send(*ExclamationResponse, ...yarpc.StreamOption) error
}

// ExcitedServiceServiceExclamationBidiStreamYARPCServer receives ExclamationRequests and sends ExclamationResponse.
type ExcitedServiceServiceExclamationBidiStreamYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*ExclamationRequest, error)
	Send(*ExclamationResponse, ...yarpc.StreamOption) error
}

// BuildExcitedServiceYARPCProcedures prepares an implementation of the ExcitedService service for YARPC registration.
func BuildExcitedServiceYARPCProcedures(server ExcitedServiceYARPCServer) []transport.Procedure {
	handler := &_ExcitedServiceYARPCHandler{server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "foo.ExcitedService",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Exclamation",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:     handler.Exclamation,
							NewRequest: newExcitedServiceServiceExclamationYARPCRequest,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "ExclamationBidiStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.ExclamationBidiStream,
						},
					),
				},

				{
					MethodName: "ExclamationServerStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.ExclamationServerStream,
						},
					),
				},

				{
					MethodName: "ExclamationClientStream",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.ExclamationClientStream,
						},
					),
				},
			},
		},
	)
}

// FxExcitedServiceYARPCClientParams defines the input
// for NewFxExcitedServiceYARPCClient. It provides the
// paramaters to get a ExcitedServiceYARPCClient in an
// Fx application.
type FxExcitedServiceYARPCClientParams struct {
	fx.In

	Provider yarpc.ClientConfig
}

// FxExcitedServiceYARPCClientResult defines the output
// of NewFxExcitedServiceYARPCClient. It provides a
// ExcitedServiceYARPCClient to an Fx application.
type FxExcitedServiceYARPCClientResult struct {
	fx.Out

	Client ExcitedServiceYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxExcitedServiceYARPCClient provides a ExcitedServiceYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    foopb.NewFxExcitedServiceYARPCClient("service-name"),
//    ...
//  )
func NewFxExcitedServiceYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxExcitedServiceYARPCClientParams) FxExcitedServiceYARPCClientResult {
		return FxExcitedServiceYARPCClientResult{
			Client: NewExcitedServiceYARPCClient(params.Provider.ClientConfig(name), options...),
		}
	}
}

// FxExcitedServiceYARPCProceduresParams defines the input
// for NewFxExcitedServiceYARPCProcedures. It provides the
// paramaters to get ExcitedServiceYARPCServer procedures in an
// Fx application.
type FxExcitedServiceYARPCProceduresParams struct {
	fx.In

	Server ExcitedServiceYARPCServer
}

// FxExcitedServiceYARPCProceduresResult defines the output
// of NewFxExcitedServiceYARPCProcedures. It provides
// ExcitedServiceYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxExcitedServiceYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxExcitedServiceYARPCProcedures provides ExcitedServiceYARPCServer procedures to an Fx application.
// It expects a ExcitedServiceYARPCServer to be present in the container.
//
//  fx.Provide(
//    foopb.NewFxExcitedServiceYARPCProcedures(),
//    ...
//  )
func NewFxExcitedServiceYARPCProcedures() interface{} {
	return func(params FxExcitedServiceYARPCProceduresParams) FxExcitedServiceYARPCProceduresResult {
		return FxExcitedServiceYARPCProceduresResult{
			Procedures: BuildExcitedServiceYARPCProcedures(params.Server),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "foo.ExcitedService",
				FileDescriptors: yarpcFileDescriptorClosurea61802764a7d7e5a,
			},
		}
	}
}

type _ExcitedServiceYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_ExcitedServiceYARPCCaller) Exclamation(ctx context.Context, request *ExclamationRequest, options ...yarpc.CallOption) (*ExclamationResponse, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Exclamation", request, newExcitedServiceServiceExclamationYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ExclamationResponse)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ExcitedServiceYARPCCaller) ExclamationClientStream(ctx context.Context, options ...yarpc.CallOption) (ExcitedServiceServiceExclamationClientStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ExclamationClientStream", options...)
	if err != nil {
		return nil, err
	}
	return &_ExcitedServiceServiceExclamationClientStreamYARPCClient{stream: stream}, nil
}

func (c *_ExcitedServiceYARPCCaller) ExclamationServerStream(ctx context.Context, request *ExclamationRequest, options ...yarpc.CallOption) (ExcitedServiceServiceExclamationServerStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ExclamationServerStream", options...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(request); err != nil {
		return nil, err
	}
	return &_ExcitedServiceServiceExclamationServerStreamYARPCClient{stream: stream}, nil
}

func (c *_ExcitedServiceYARPCCaller) ExclamationBidiStream(ctx context.Context, options ...yarpc.CallOption) (ExcitedServiceServiceExclamationBidiStreamYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "ExclamationBidiStream", options...)
	if err != nil {
		return nil, err
	}
	return &_ExcitedServiceServiceExclamationBidiStreamYARPCClient{stream: stream}, nil
}

type _ExcitedServiceYARPCHandler struct {
	server ExcitedServiceYARPCServer
}

func (h *_ExcitedServiceYARPCHandler) Exclamation(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *ExclamationRequest
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*ExclamationRequest)
		if !ok {
			return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Exclamation(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_ExcitedServiceYARPCHandler) ExclamationClientStream(serverStream *protobuf.ServerStream) error {
	response, err := h.server.ExclamationClientStream(&_ExcitedServiceServiceExclamationClientStreamYARPCServer{serverStream: serverStream})
	if err != nil {
		return err
	}
	return serverStream.Send(response)
}

func (h *_ExcitedServiceYARPCHandler) ExclamationServerStream(serverStream *protobuf.ServerStream) error {
	requestMessage, err := serverStream.Receive(newExcitedServiceServiceExclamationServerStreamYARPCRequest)
	if requestMessage == nil {
		return err
	}

	request, ok := requestMessage.(*ExclamationRequest)
	if !ok {
		return protobuf.CastError(emptyExcitedServiceServiceExclamationServerStreamYARPCRequest, requestMessage)
	}
	return h.server.ExclamationServerStream(request, &_ExcitedServiceServiceExclamationServerStreamYARPCServer{serverStream: serverStream})
}

func (h *_ExcitedServiceYARPCHandler) ExclamationBidiStream(serverStream *protobuf.ServerStream) error {
	return h.server.ExclamationBidiStream(&_ExcitedServiceServiceExclamationBidiStreamYARPCServer{serverStream: serverStream})
}

type _ExcitedServiceServiceExclamationClientStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_ExcitedServiceServiceExclamationClientStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ExcitedServiceServiceExclamationClientStreamYARPCClient) Send(request *ExclamationRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_ExcitedServiceServiceExclamationClientStreamYARPCClient) CloseAndRecv(options ...yarpc.StreamOption) (*ExclamationResponse, error) {
	if err := c.stream.Close(options...); err != nil {
		return nil, err
	}
	responseMessage, err := c.stream.Receive(newExcitedServiceServiceExclamationClientStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ExclamationResponse)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationClientStreamYARPCResponse, responseMessage)
	}
	return response, err
}

type _ExcitedServiceServiceExclamationServerStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_ExcitedServiceServiceExclamationServerStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ExcitedServiceServiceExclamationServerStreamYARPCClient) Recv(options ...yarpc.StreamOption) (*ExclamationResponse, error) {
	responseMessage, err := c.stream.Receive(newExcitedServiceServiceExclamationServerStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ExclamationResponse)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationServerStreamYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ExcitedServiceServiceExclamationServerStreamYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _ExcitedServiceServiceExclamationBidiStreamYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_ExcitedServiceServiceExclamationBidiStreamYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_ExcitedServiceServiceExclamationBidiStreamYARPCClient) Send(request *ExclamationRequest, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_ExcitedServiceServiceExclamationBidiStreamYARPCClient) Recv(options ...yarpc.StreamOption) (*ExclamationResponse, error) {
	responseMessage, err := c.stream.Receive(newExcitedServiceServiceExclamationBidiStreamYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*ExclamationResponse)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationBidiStreamYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_ExcitedServiceServiceExclamationBidiStreamYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _ExcitedServiceServiceExclamationClientStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_ExcitedServiceServiceExclamationClientStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_ExcitedServiceServiceExclamationClientStreamYARPCServer) Recv(options ...yarpc.StreamOption) (*ExclamationRequest, error) {
	requestMessage, err := s.serverStream.Receive(newExcitedServiceServiceExclamationClientStreamYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*ExclamationRequest)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationClientStreamYARPCRequest, requestMessage)
	}
	return request, err
}

type _ExcitedServiceServiceExclamationServerStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_ExcitedServiceServiceExclamationServerStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_ExcitedServiceServiceExclamationServerStreamYARPCServer) Send(response *ExclamationResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _ExcitedServiceServiceExclamationBidiStreamYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_ExcitedServiceServiceExclamationBidiStreamYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_ExcitedServiceServiceExclamationBidiStreamYARPCServer) Recv(options ...yarpc.StreamOption) (*ExclamationRequest, error) {
	requestMessage, err := s.serverStream.Receive(newExcitedServiceServiceExclamationBidiStreamYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*ExclamationRequest)
	if !ok {
		return nil, protobuf.CastError(emptyExcitedServiceServiceExclamationBidiStreamYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_ExcitedServiceServiceExclamationBidiStreamYARPCServer) Send(response *ExclamationResponse, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newExcitedServiceServiceExclamationYARPCRequest() proto.Message {
	return &ExclamationRequest{}
}

func newExcitedServiceServiceExclamationYARPCResponse() proto.Message {
	return &ExclamationResponse{}
}

func newExcitedServiceServiceExclamationClientStreamYARPCRequest() proto.Message {
	return &ExclamationRequest{}
}

func newExcitedServiceServiceExclamationClientStreamYARPCResponse() proto.Message {
	return &ExclamationResponse{}
}

func newExcitedServiceServiceExclamationServerStreamYARPCRequest() proto.Message {
	return &ExclamationRequest{}
}

func newExcitedServiceServiceExclamationServerStreamYARPCResponse() proto.Message {
	return &ExclamationResponse{}
}

func newExcitedServiceServiceExclamationBidiStreamYARPCRequest() proto.Message {
	return &ExclamationRequest{}
}

func newExcitedServiceServiceExclamationBidiStreamYARPCResponse() proto.Message {
	return &ExclamationResponse{}
}

var (
	emptyExcitedServiceServiceExclamationYARPCRequest              = &ExclamationRequest{}
	emptyExcitedServiceServiceExclamationYARPCResponse             = &ExclamationResponse{}
	emptyExcitedServiceServiceExclamationClientStreamYARPCRequest  = &ExclamationRequest{}
	emptyExcitedServiceServiceExclamationClientStreamYARPCResponse = &ExclamationResponse{}
	emptyExcitedServiceServiceExclamationServerStreamYARPCRequest  = &ExclamationRequest{}
	emptyExcitedServiceServiceExclamationServerStreamYARPCResponse = &ExclamationResponse{}
	emptyExcitedServiceServiceExclamationBidiStreamYARPCRequest    = &ExclamationRequest{}
	emptyExcitedServiceServiceExclamationBidiStreamYARPCResponse   = &ExclamationResponse{}
)

var yarpcFileDescriptorClosurea61802764a7d7e5a = [][]byte{
	// foo/foo.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x4e, 0xe3, 0x56,
		0x14, 0xc6, 0x76, 0x7e, 0x8f, 0x49, 0x08, 0x97, 0x16, 0x5c, 0x0b, 0xd1, 0xe0, 0x45, 0x95, 0x52,
		0xc9, 0x41, 0xa1, 0x95, 0x50, 0x37, 0x6d, 0xdc, 0x24, 0x0a, 0x6a, 0x9a, 0x20, 0x93, 0xb6, 0x12,
		0x9b, 0xc8, 0x89, 0xaf, 0xc1, 0x6a, 0xe2, 0xeb, 0xda, 0x37, 0x14, 0x52, 0x75, 0xd3, 0xfd, 0xac,
		0xe6, 0x59, 0xe6, 0x05, 0xe6, 0x15, 0xe6, 0x15, 0xe6, 0x31, 0x66, 0x31, 0xba, 0xf7, 0xda, 0xf9,
		0x01, 0x16, 0x23, 0x66, 0x13, 0xdd, 0x73, 0xbe, 0xcf, 0xdf, 0xf9, 0xee, 0xe7, 0xe3, 0x40, 0xc9,
		0x23, 0xa4, 0xee, 0x11, 0x62, 0x86, 0x11, 0xa1, 0x04, 0x29, 0x1e, 0x21, 0x3a, 0xef, 0xb9, 0x38,
		0x14, 0x3d, 0xfd, 0xf0, 0x86, 0x90, 0x9b, 0x29, 0xae, 0x3b, 0xa1, 0x5f, 0x77, 0x82, 0x80, 0x50,
		0x87, 0xfa, 0x24, 0x88, 0x13, 0xf4, 0x28, 0x41, 0x79, 0x35, 0x9e, 0x7b, 0x75, 0x77, 0x1e, 0x71,
		0x42, 0x82, 0x7f, 0xfd, 0x18, 0xa7, 0xfe, 0x0c, 0xc7, 0xd4, 0x99, 0xa5, 0xf2, 0xa5, 0x78, 0x3e,
		0xae, 0xc7, 0xf3, 0xb1, 0x28, 0x8d, 0x37, 0x12, 0x28, 0x1d, 0x42, 0xd0, 0x11, 0x28, 0x63, 0x27,
		0xd2, 0xa4, 0xaa, 0x54, 0x53, 0x1b, 0xdb, 0x26, 0xb3, 0xd8, 0x21, 0xc4, 0xb4, 0x9c, 0xc8, 0x66,
		0x80, 0xfe, 0x4a, 0x02, 0xc5, 0x72, 0x22, 0x64, 0x30, 0xde, 0x82, 0xf3, 0xca, 0x8d, 0xca, 0x3a,
		0xcf, 0xb4, 0x9c, 0x05, 0xe3, 0x2e, 0x04, 0x87, 0x6a, 0xf2, 0xb3, 0x1c, 0xca, 0x38, 0xd4, 0x38,
		0x62, 0x72, 0x0b, 0x74, 0x00, 0x7b, 0x9d, 0xc1, 0x60, 0x64, 0x35, 0xed, 0x91, 0xd5, 0xbc, 0x1e,
		0x5d, 0xf4, 0xff, 0x68, 0xf6, 0x2e, 0x5a, 0x95, 0x2d, 0x81, 0xd3, 0x4d, 0x7c, 0xb8, 0x86, 0x47,
		0x90, 0xb1, 0x9c, 0x28, 0x42, 0x5f, 0x40, 0xf6, 0x16, 0x4f, 0xa7, 0x84, 0x3b, 0x52, 0x6c, 0x51,
		0x20, 0x1d, 0x14, 0x17, 0x87, 0xdc, 0x81, 0xda, 0x28, 0x70, 0x07, 0x2d, 0x1c, 0xda, 0xac, 0x89,
		0xce, 0xa1, 0xb8, 0xcc, 0x44, 0x53, 0x38, 0x43, 0x37, 0x45, 0x6a, 0x66, 0x9a, 0x9a, 0x39, 0x4c,
		0x19, 0xf6, 0x8a, 0x6c, 0x7c, 0x90, 0x21, 0xdf, 0x0c, 0x08, 0xbd, 0xc5, 0x11, 0xaa, 0x80, 0x42,
		0x02, 0x9c, 0x4c, 0x65, 0x47, 0xd6, 0xa1, 0xff, 0x10, 0x3e, 0xb3, 0x68, 0xb3, 0x23, 0xfa, 0x06,
		0xf2, 0x8e, 0xa0, 0x27, 0x73, 0x44, 0xae, 0x89, 0x84, 0x9d, 0x82, 0x08, 0x41, 0xc6, 0x23, 0xf3,
		0x48, 0xcb, 0x54, 0x95, 0x5a, 0xd1, 0xe6, 0x67, 0x54, 0x4d, 0xef, 0x95, 0xe5, 0x29, 0x02, 0x7f,
		0xb2, 0xcb, 0x3a, 0xe9, 0x1d, 0x8f, 0x41, 0x9a, 0x69, 0xb9, 0xaa, 0x52, 0x53, 0x1b, 0x7b, 0xeb,
		0xba, 0xe6, 0x6f, 0xed, 0x80, 0x46, 0x0f, 0xb6, 0x34, 0x43, 0xfb, 0x90, 0x8d, 0xf1, 0x1d, 0x0e,
		0xb4, 0x3c, 0xb3, 0xd9, 0xdd, 0xb2, 0x45, 0xc9, 0xfa, 0xd8, 0xbf, 0xb9, 0xa5, 0x5a, 0x81, 0x99,
		0x65, 0x7d, 0x5e, 0xa2, 0x2a, 0x64, 0x02, 0x3f, 0xc0, 0x5a, 0x91, 0xab, 0x6e, 0xba, 0xe5, 0x08,
		0xfa, 0x01, 0x0a, 0xe9, 0xc2, 0x69, 0xc0, 0xef, 0xf4, 0xd5, 0x93, 0xec, 0x5a, 0x09, 0xc1, 0x5e,
		0x52, 0xf5, 0xef, 0x21, 0x27, 0x5c, 0xb1, 0x94, 0xfe, 0xc2, 0x0f, 0x3c, 0xb7, 0xa2, 0xcd, 0x8e,
		0xec, 0x0d, 0xde, 0x39, 0xd3, 0x39, 0xe6, 0xc9, 0x29, 0xb6, 0x28, 0x7e, 0x94, 0xcf, 0x25, 0xab,
		0x04, 0x2a, 0x09, 0x30, 0xf1, 0x46, 0xfc, 0xd7, 0xf8, 0x09, 0x72, 0x5d, 0x27, 0xfe, 0xf3, 0xd7,
		0xe1, 0x86, 0x0b, 0xe9, 0x93, 0x5d, 0x18, 0x39, 0xb6, 0x33, 0x8b, 0x85, 0x71, 0x08, 0xc0, 0xf6,
		0x1a, 0xff, 0x3d, 0xc7, 0x31, 0x45, 0x65, 0x90, 0x7d, 0x37, 0x79, 0x91, 0xb2, 0xef, 0x1a, 0xdf,
		0x82, 0xda, 0x21, 0xc4, 0xc6, 0x71, 0x48, 0x82, 0x18, 0xa7, 0xab, 0x24, 0x3d, 0xb3, 0x4a, 0xc6,
		0x09, 0xa0, 0xf6, 0xfd, 0x64, 0xea, 0xcc, 0xc4, 0xa4, 0x44, 0x70, 0x79, 0x21, 0x71, 0x49, 0x51,
		0x18, 0xdf, 0xc1, 0xde, 0x06, 0x37, 0x91, 0x7f, 0x96, 0x7c, 0xd2, 0x87, 0x2c, 0x7f, 0xd7, 0x68,
		0x17, 0x4a, 0xdd, 0x76, 0xaf, 0x37, 0x58, 0x6d, 0x3e, 0xda, 0x01, 0x55, 0xb4, 0x7e, 0xef, 0x5f,
		0xb5, 0x87, 0x15, 0x09, 0x95, 0x01, 0x44, 0x63, 0x68, 0xb7, 0xdb, 0x15, 0x79, 0xf5, 0x8c, 0xd5,
		0xec, 0xf5, 0x06, 0x83, 0x7e, 0x45, 0x39, 0xd9, 0x17, 0x1f, 0xef, 0x0e, 0xa8, 0xec, 0x4b, 0x5a,
		0x6a, 0x35, 0x3c, 0xd8, 0xe6, 0x73, 0xae, 0x70, 0x74, 0xe7, 0x4f, 0x30, 0x3a, 0x16, 0x7f, 0x06,
		0x05, 0x93, 0xfd, 0x41, 0xb4, 0x70, 0xa8, 0x2f, 0xbf, 0xde, 0xa5, 0xe1, 0xb3, 0x44, 0x8a, 0x03,
		0xab, 0x18, 0xf5, 0x65, 0x34, 0xc6, 0xee, 0xff, 0xef, 0xde, 0xbf, 0x96, 0x55, 0x54, 0xac, 0x8f,
		0x9d, 0xa8, 0xfe, 0xaf, 0xef, 0xfe, 0xd7, 0x78, 0x2b, 0x43, 0xb9, 0x7d, 0x3f, 0xf1, 0x29, 0x76,
		0xd3, 0x51, 0x3f, 0x83, 0xba, 0x96, 0x07, 0x3a, 0xe0, 0x8f, 0x3f, 0x4d, 0x53, 0xd7, 0x9e, 0x02,
		0x89, 0x93, 0x3e, 0x1c, 0xac, 0xb5, 0x7f, 0x99, 0xfa, 0x38, 0xa0, 0x57, 0x34, 0xc2, 0xce, 0xec,
		0x05, 0x6a, 0x35, 0xe9, 0x91, 0x1e, 0xf3, 0x89, 0xa3, 0x17, 0xeb, 0x9d, 0x32, 0xbd, 0x2f, 0xd7,
		0x00, 0xcb, 0x77, 0xfd, 0xcf, 0x70, 0x77, 0x2a, 0x59, 0x87, 0x90, 0x9f, 0x90, 0x19, 0xa3, 0x58,
		0x85, 0x0e, 0x21, 0x97, 0x6c, 0xd3, 0x2f, 0xa5, 0xeb, 0xac, 0x47, 0x48, 0x38, 0x1e, 0xe7, 0xf8,
		0xe6, 0x9f, 0x7d, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x08, 0xed, 0x0c, 0x0a, 0x62, 0x06, 0x00, 0x00,
	},
	// foo/dep.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcb, 0xcf, 0xd7,
		0x4f, 0x49, 0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0xcb, 0xcf, 0x57, 0x92,
		0xe6, 0x62, 0x76, 0x49, 0x2d, 0x10, 0x12, 0xe1, 0x62, 0xcd, 0x48, 0xcd, 0xc9, 0xc9, 0x97, 0x60,
		0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x9c, 0x64, 0xb8, 0xd8, 0x93, 0xf3, 0x73, 0xf5, 0xd2,
		0xf2, 0xf3, 0x9d, 0x38, 0x5c, 0x52, 0x0b, 0x02, 0x40, 0xda, 0x02, 0x18, 0xa3, 0x58, 0xd3, 0xf2,
		0xf3, 0x0b, 0x92, 0x92, 0xd8, 0xc0, 0xc6, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x44, 0xcf,
		0x91, 0x89, 0x57, 0x00, 0x00, 0x00,
	},
	// google/api/annotations.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc,
		0xcf, 0x2b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x82, 0xc8, 0xea, 0x25, 0x16, 0x64,
		0x4a, 0x89, 0x22, 0xa9, 0xcc, 0x28, 0x29, 0x29, 0x80, 0x28, 0x91, 0x52, 0x80, 0x0a, 0x83, 0x79,
		0x49, 0xa5, 0x69, 0xfa, 0x29, 0xa9, 0xc5, 0xc9, 0x45, 0x99, 0x05, 0x25, 0xf9, 0x45, 0x10, 0x15,
		0x56, 0xde, 0x5c, 0x2c, 0x20, 0xf5, 0x42, 0x72, 0x7a, 0x50, 0xd3, 0x60, 0x4a, 0xf5, 0x7c, 0x53,
		0x4b, 0x32, 0xf2, 0x53, 0xfc, 0x0b, 0xc0, 0x56, 0x4a, 0x6c, 0x38, 0xb5, 0x47, 0x49, 0x81, 0x51,
		0x83, 0xdb, 0x48, 0x44, 0x0f, 0x61, 0xad, 0x9e, 0x47, 0x49, 0x49, 0x41, 0x50, 0x69, 0x4e, 0x6a,
		0x10, 0xd8, 0x10, 0xa7, 0x3c, 0x2e, 0xbe, 0xe4, 0xfc, 0x5c, 0x24, 0x05, 0x4e, 0x02, 0x8e, 0x08,
		0x67, 0x07, 0x80, 0x4c, 0x0e, 0x60, 0x8c, 0x72, 0x84, 0xca, 0xa7, 0xe7, 0xe7, 0x24, 0xe6, 0xa5,
		0xeb, 0xe5, 0x17, 0xa5, 0xeb, 0xa7, 0xa7, 0xe6, 0x81, 0xed, 0xd5, 0x87, 0x48, 0x25, 0x16, 0x64,
		0x16, 0xa3, 0x7b, 0xda, 0x1a, 0x89, 0xbd, 0x88, 0x89, 0xc5, 0xdd, 0x31, 0xc0, 0x33, 0x89, 0x0d,
		0xac, 0xc9, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x29, 0x19, 0x62, 0x28, 0x01, 0x00, 0x00,
	},
	// google/api/http.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x8e, 0xd3, 0x30,
		0x10, 0x86, 0x49, 0x9b, 0x76, 0xdb, 0xe9, 0x82, 0x84, 0x59, 0x90, 0x85, 0x40, 0x54, 0xe5, 0x52,
		0x71, 0x48, 0xa5, 0xe5, 0xc0, 0x61, 0x4f, 0x1b, 0xa8, 0x58, 0x6e, 0x55, 0x8e, 0x5c, 0x22, 0x37,
		0x1e, 0x52, 0x83, 0xd7, 0xb6, 0xe2, 0x09, 0xa2, 0xaf, 0xc3, 0x63, 0xf1, 0x24, 0x1c, 0x91, 0x9d,
		0x84, 0x56, 0x42, 0xe2, 0x36, 0xf3, 0xff, 0x9f, 0xa7, 0x7f, 0x27, 0x03, 0x4f, 0x6b, 0x6b, 0x6b,
		0x8d, 0x1b, 0xe1, 0xd4, 0xe6, 0x40, 0xe4, 0x32, 0xd7, 0x58, 0xb2, 0x0c, 0x3a, 0x39, 0x13, 0x4e,
		0xad, 0x8e, 0x90, 0xde, 0x11, 0x39, 0xf6, 0x06, 0x26, 0x4d, 0xab, 0xd1, 0xf3, 0x64, 0x39, 0x5e,
		0x2f, 0xae, 0xaf, 0xb2, 0x13, 0x93, 0x05, 0xa0, 0x68, 0x35, 0x16, 0x1d, 0xc2, 0xb6, 0xf0, 0xea,
		0x4b, 0xab, 0xf5, 0xb1, 0x94, 0x58, 0x59, 0x89, 0x65, 0x83, 0x1e, 0x9b, 0xef, 0x28, 0x4b, 0xfc,
		0xe1, 0x84, 0xf1, 0xca, 0x1a, 0x3e, 0x5a, 0x26, 0xeb, 0x59, 0xf1, 0x22, 0x62, 0x1f, 0x22, 0x55,
		0xf4, 0xd0, 0x76, 0x60, 0x56, 0xbf, 0x46, 0x30, 0x1b, 0x46, 0xb3, 0xe7, 0x30, 0xf3, 0xa8, 0xb1,
		0x22, 0xdb, 0xf0, 0x64, 0x99, 0xac, 0xe7, 0xc5, 0xdf, 0x9e, 0x31, 0x18, 0xd7, 0x48, 0x71, 0xe6,
		0xfc, 0xee, 0x41, 0x11, 0x9a, 0xa0, 0xb9, 0x96, 0xf8, 0x78, 0xd0, 0x5c, 0x4b, 0xec, 0x0a, 0x52,
		0x67, 0x3d, 0xf1, 0xb4, 0x17, 0x63, 0xc7, 0x38, 0x4c, 0x25, 0x6a, 0x24, 0xe4, 0x93, 0x5e, 0xef,
		0x7b, 0xf6, 0x0c, 0x26, 0x4e, 0x50, 0x75, 0xe0, 0xd3, 0xde, 0xe8, 0x5a, 0xf6, 0x0e, 0xa6, 0x55,
		0xeb, 0xc9, 0xde, 0xf3, 0xd9, 0x32, 0x59, 0x2f, 0xae, 0x5f, 0x9e, 0x2f, 0xe3, 0x7d, 0x74, 0x42,
		0xee, 0x9d, 0x20, 0xc2, 0xc6, 0x84, 0x81, 0x1d, 0xce, 0x18, 0xa4, 0x7b, 0x2b, 0x8f, 0xfc, 0x22,
		0xfe, 0x81, 0x58, 0xb3, 0xd7, 0xf0, 0xb0, 0x41, 0xef, 0xac, 0xf1, 0x58, 0x46, 0xf3, 0x32, 0x9a,
		0x97, 0x83, 0x98, 0x07, 0x68, 0x0b, 0x4f, 0x84, 0x94, 0x8a, 0x94, 0x35, 0x42, 0x97, 0x7b, 0x65,
		0xa4, 0x32, 0xb5, 0xe7, 0x8b, 0xff, 0x7c, 0x0b, 0x76, 0x7a, 0x90, 0xf7, 0x7c, 0x3e, 0x87, 0x0b,
		0xd7, 0x85, 0x5a, 0xdd, 0xc0, 0xe3, 0x7f, 0x92, 0x86, 0x7c, 0xdf, 0x94, 0x91, 0xfd, 0x82, 0x63,
		0x1d, 0x34, 0x27, 0xe8, 0xd0, 0x6d, 0xb7, 0x88, 0x75, 0xfe, 0x15, 0x1e, 0x55, 0xf6, 0xfe, 0xec,
		0x67, 0xf3, 0x79, 0x1c, 0x13, 0xae, 0x67, 0x97, 0x7c, 0xbe, 0xed, 0x8d, 0xda, 0x6a, 0x61, 0xea,
		0xcc, 0x36, 0xf5, 0xa6, 0x46, 0x13, 0x6f, 0x6b, 0xd3, 0x59, 0xc2, 0x29, 0x1f, 0xaf, 0x4e, 0x18,
		0x63, 0x49, 0x84, 0x98, 0xfe, 0xe6, 0xac, 0xfe, 0x9d, 0x24, 0x3f, 0x47, 0xe9, 0xc7, 0xdb, 0xdd,
		0xa7, 0xfd, 0x34, 0xbe, 0x7b, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0xae, 0xde, 0xa1, 0xd0, 0xac,
		0x02, 0x00, 0x00,
	},
	// google/protobuf/descriptor.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0xdd, 0x8e, 0xdb, 0xc6,
		0x15, 0x0e, 0xf5, 0xb7, 0xd2, 0x91, 0x56, 0x3b, 0x3b, 0xbb, 0xb1, 0xe9, 0xcd, 0x8f, 0xd7, 0xca,
		0x8f, 0xd7, 0x4e, 0xac, 0x0d, 0x1c, 0xdb, 0x71, 0xd6, 0x45, 0x5a, 0xad, 0x44, 0x6f, 0xe4, 0xee,
		0x4a, 0x2a, 0xa5, 0x6d, 0x7e, 0x80, 0x82, 0x98, 0x25, 0x47, 0x12, 0x6d, 0x8a, 0x64, 0x48, 0xca,
		0xf6, 0x06, 0xbd, 0x30, 0xd0, 0xab, 0x5e, 0x15, 0xe8, 0x55, 0x51, 0x14, 0xbd, 0xe8, 0x4d, 0x80,
		0x3e, 0x40, 0x81, 0xde, 0xf5, 0x09, 0x0a, 0xe4, 0x0d, 0x8a, 0xb6, 0x40, 0xfb, 0x08, 0xbd, 0x2c,
		0x66, 0x86, 0xa4, 0x48, 0x49, 0x1b, 0x6f, 0x02, 0xc4, 0xb9, 0x92, 0xe6, 0x3b, 0xdf, 0x39, 0x73,
		0xe6, 0xcc, 0x99, 0x99, 0x33, 0x43, 0xd8, 0x1e, 0x39, 0xce, 0xc8, 0xa2, 0xbb, 0xae, 0xe7, 0x04,
		0xce, 0xc9, 0x74, 0xb8, 0x6b, 0x50, 0x5f, 0xf7, 0x4c, 0x37, 0x70, 0xbc, 0x3a, 0xc7, 0xf0, 0x9a,
		0x60, 0xd4, 0x23, 0x46, 0xed, 0x08, 0xd6, 0xef, 0x9b, 0x16, 0x6d, 0xc5, 0xc4, 0x3e, 0x0d, 0xf0,
		0x5d, 0xc8, 0x0d, 0x4d, 0x8b, 0xca, 0xd2, 0x76, 0x76, 0xa7, 0x7c, 0xf3, 0xcd, 0xfa, 0x9c, 0x52,
		0x3d, 0xad, 0xd1, 0x63, 0xb0, 0xca, 0x35, 0x6a, 0xff, 0xce, 0xc1, 0xc6, 0x12, 0x29, 0xc6, 0x90,
		0xb3, 0xc9, 0x84, 0x59, 0x94, 0x76, 0x4a, 0x2a, 0xff, 0x8f, 0x65, 0x58, 0x71, 0x89, 0xfe, 0x88,
		0x8c, 0xa8, 0x9c, 0xe1, 0x70, 0xd4, 0xc4, 0xaf, 0x03, 0x18, 0xd4, 0xa5, 0xb6, 0x41, 0x6d, 0xfd,
		0x54, 0xce, 0x6e, 0x67, 0x77, 0x4a, 0x6a, 0x02, 0xc1, 0xef, 0xc0, 0xba, 0x3b, 0x3d, 0xb1, 0x4c,
		0x5d, 0x4b, 0xd0, 0x60, 0x3b, 0xbb, 0x93, 0x57, 0x91, 0x10, 0xb4, 0x66, 0xe4, 0xab, 0xb0, 0xf6,
		0x84, 0x92, 0x47, 0x49, 0x6a, 0x99, 0x53, 0xab, 0x0c, 0x4e, 0x10, 0x9b, 0x50, 0x99, 0x50, 0xdf,
		0x27, 0x23, 0xaa, 0x05, 0xa7, 0x2e, 0x95, 0x73, 0x7c, 0xf4, 0xdb, 0x0b, 0xa3, 0x9f, 0x1f, 0x79,
		0x39, 0xd4, 0x1a, 0x9c, 0xba, 0x14, 0x37, 0xa0, 0x44, 0xed, 0xe9, 0x44, 0x58, 0xc8, 0x9f, 0x11,
		0x3f, 0xc5, 0x9e, 0x4e, 0xe6, 0xad, 0x14, 0x99, 0x5a, 0x68, 0x62, 0xc5, 0xa7, 0xde, 0x63, 0x53,
		0xa7, 0x72, 0x81, 0x1b, 0xb8, 0xba, 0x60, 0xa0, 0x2f, 0xe4, 0xf3, 0x36, 0x22, 0x3d, 0xdc, 0x84,
		0x12, 0x7d, 0x1a, 0x50, 0xdb, 0x37, 0x1d, 0x5b, 0x5e, 0xe1, 0x46, 0xde, 0x5a, 0x32, 0x8b, 0xd4,
		0x32, 0xe6, 0x4d, 0xcc, 0xf4, 0xf0, 0x1d, 0x58, 0x71, 0xdc, 0xc0, 0x74, 0x6c, 0x5f, 0x2e, 0x6e,
		0x4b, 0x3b, 0xe5, 0x9b, 0xaf, 0x2e, 0x4d, 0x84, 0xae, 0xe0, 0xa8, 0x11, 0x19, 0xb7, 0x01, 0xf9,
		0xce, 0xd4, 0xd3, 0xa9, 0xa6, 0x3b, 0x06, 0xd5, 0x4c, 0x7b, 0xe8, 0xc8, 0x25, 0x6e, 0xe0, 0xf2,
		0xe2, 0x40, 0x38, 0xb1, 0xe9, 0x18, 0xb4, 0x6d, 0x0f, 0x1d, 0xb5, 0xea, 0xa7, 0xda, 0xf8, 0x02,
		0x14, 0xfc, 0x53, 0x3b, 0x20, 0x4f, 0xe5, 0x0a, 0xcf, 0x90, 0xb0, 0x55, 0xfb, 0x6b, 0x01, 0xd6,
		0xce, 0x93, 0x62, 0xf7, 0x20, 0x3f, 0x64, 0xa3, 0x94, 0x33, 0xdf, 0x26, 0x06, 0x42, 0x27, 0x1d,
		0xc4, 0xc2, 0x77, 0x0c, 0x62, 0x03, 0xca, 0x36, 0xf5, 0x03, 0x6a, 0x88, 0x8c, 0xc8, 0x9e, 0x33,
		0xa7, 0x40, 0x28, 0x2d, 0xa6, 0x54, 0xee, 0x3b, 0xa5, 0xd4, 0xa7, 0xb0, 0x16, 0xbb, 0xa4, 0x79,
		0xc4, 0x1e, 0x45, 0xb9, 0xb9, 0xfb, 0x3c, 0x4f, 0xea, 0x4a, 0xa4, 0xa7, 0x32, 0x35, 0xb5, 0x4a,
		0x53, 0x6d, 0xdc, 0x02, 0x70, 0x6c, 0xea, 0x0c, 0x35, 0x83, 0xea, 0x96, 0x5c, 0x3c, 0x23, 0x4a,
		0x5d, 0x46, 0x59, 0x88, 0x92, 0x23, 0x50, 0xdd, 0xc2, 0x1f, 0xce, 0x52, 0x6d, 0xe5, 0x8c, 0x4c,
		0x39, 0x12, 0x8b, 0x6c, 0x21, 0xdb, 0x8e, 0xa1, 0xea, 0x51, 0x96, 0xf7, 0xd4, 0x08, 0x47, 0x56,
		0xe2, 0x4e, 0xd4, 0x9f, 0x3b, 0x32, 0x35, 0x54, 0x13, 0x03, 0x5b, 0xf5, 0x92, 0x4d, 0xfc, 0x06,
		0xc4, 0x80, 0xc6, 0xd3, 0x0a, 0xf8, 0x2e, 0x54, 0x89, 0xc0, 0x0e, 0x99, 0xd0, 0xad, 0x2f, 0xa1,
		0x9a, 0x0e, 0x0f, 0xde, 0x84, 0xbc, 0x1f, 0x10, 0x2f, 0xe0, 0x59, 0x98, 0x57, 0x45, 0x03, 0x23,
		0xc8, 0x52, 0xdb, 0xe0, 0xbb, 0x5c, 0x5e, 0x65, 0x7f, 0xf1, 0x4f, 0x66, 0x03, 0xce, 0xf2, 0x01,
		0xbf, 0xbd, 0x38, 0xa3, 0x29, 0xcb, 0xf3, 0xe3, 0xde, 0xfa, 0x00, 0x56, 0x53, 0x03, 0x38, 0x6f,
		0xd7, 0xb5, 0x5f, 0xc2, 0xcb, 0x4b, 0x4d, 0xe3, 0x4f, 0x61, 0x73, 0x6a, 0x9b, 0x76, 0x40, 0x3d,
		0xd7, 0xa3, 0x2c, 0x63, 0x45, 0x57, 0xf2, 0x7f, 0x56, 0xce, 0xc8, 0xb9, 0xe3, 0x24, 0x5b, 0x58,
		0x51, 0x37, 0xa6, 0x8b, 0xe0, 0xf5, 0x52, 0xf1, 0xbf, 0x2b, 0xe8, 0xd9, 0xb3, 0x67, 0xcf, 0x32,
		0xb5, 0xdf, 0x15, 0x60, 0x73, 0xd9, 0x9a, 0x59, 0xba, 0x7c, 0x2f, 0x40, 0xc1, 0x9e, 0x4e, 0x4e,
		0xa8, 0xc7, 0x83, 0x94, 0x57, 0xc3, 0x16, 0x6e, 0x40, 0xde, 0x22, 0x27, 0xd4, 0x92, 0x73, 0xdb,
		0xd2, 0x4e, 0xf5, 0xe6, 0x3b, 0xe7, 0x5a, 0x95, 0xf5, 0x43, 0xa6, 0xa2, 0x0a, 0x4d, 0xfc, 0x11,
		0xe4, 0xc2, 0x2d, 0x9a, 0x59, 0xb8, 0x7e, 0x3e, 0x0b, 0x6c, 0x2d, 0xa9, 0x5c, 0x0f, 0xbf, 0x02,
		0x25, 0xf6, 0x2b, 0x72, 0xa3, 0xc0, 0x7d, 0x2e, 0x32, 0x80, 0xe5, 0x05, 0xde, 0x82, 0x22, 0x5f,
		0x26, 0x06, 0x8d, 0x8e, 0xb6, 0xb8, 0xcd, 0x12, 0xcb, 0xa0, 0x43, 0x32, 0xb5, 0x02, 0xed, 0x31,
		0xb1, 0xa6, 0x94, 0x27, 0x7c, 0x49, 0xad, 0x84, 0xe0, 0xcf, 0x19, 0x86, 0x2f, 0x43, 0x59, 0xac,
		0x2a, 0xd3, 0x36, 0xe8, 0x53, 0xbe, 0x7b, 0xe6, 0x55, 0xb1, 0xd0, 0xda, 0x0c, 0x61, 0xdd, 0x3f,
		0xf4, 0x1d, 0x3b, 0x4a, 0x4d, 0xde, 0x05, 0x03, 0x78, 0xf7, 0x1f, 0xcc, 0x6f, 0xdc, 0xaf, 0x2d,
		0x1f, 0xde, 0x7c, 0x4e, 0xd5, 0xfe, 0x92, 0x81, 0x1c, 0xdf, 0x2f, 0xd6, 0xa0, 0x3c, 0xf8, 0xac,
		0xa7, 0x68, 0xad, 0xee, 0xf1, 0xfe, 0xa1, 0x82, 0x24, 0x5c, 0x05, 0xe0, 0xc0, 0xfd, 0xc3, 0x6e,
		0x63, 0x80, 0x32, 0x71, 0xbb, 0xdd, 0x19, 0xdc, 0xb9, 0x85, 0xb2, 0xb1, 0xc2, 0xb1, 0x00, 0x72,
		0x49, 0xc2, 0xfb, 0x37, 0x51, 0x1e, 0x23, 0xa8, 0x08, 0x03, 0xed, 0x4f, 0x95, 0xd6, 0x9d, 0x5b,
		0xa8, 0x90, 0x46, 0xde, 0xbf, 0x89, 0x56, 0xf0, 0x2a, 0x94, 0x38, 0xb2, 0xdf, 0xed, 0x1e, 0xa2,
		0x62, 0x6c, 0xb3, 0x3f, 0x50, 0xdb, 0x9d, 0x03, 0x54, 0x8a, 0x6d, 0x1e, 0xa8, 0xdd, 0xe3, 0x1e,
		0x82, 0xd8, 0xc2, 0x91, 0xd2, 0xef, 0x37, 0x0e, 0x14, 0x54, 0x8e, 0x19, 0xfb, 0x9f, 0x0d, 0x94,
		0x3e, 0xaa, 0xa4, 0xdc, 0x7a, 0xff, 0x26, 0x5a, 0x8d, 0xbb, 0x50, 0x3a, 0xc7, 0x47, 0xa8, 0x8a,
		0xd7, 0x61, 0x55, 0x74, 0x11, 0x39, 0xb1, 0x36, 0x07, 0xdd, 0xb9, 0x85, 0xd0, 0xcc, 0x11, 0x61,
		0x65, 0x3d, 0x05, 0xdc, 0xb9, 0x85, 0x70, 0xad, 0x09, 0x79, 0x9e, 0x5d, 0x18, 0x43, 0xf5, 0xb0,
		0xb1, 0xaf, 0x1c, 0x6a, 0xdd, 0xde, 0xa0, 0xdd, 0xed, 0x34, 0x0e, 0x91, 0x34, 0xc3, 0x54, 0xe5,
		0x67, 0xc7, 0x6d, 0x55, 0x69, 0xa1, 0x4c, 0x12, 0xeb, 0x29, 0x8d, 0x81, 0xd2, 0x42, 0xd9, 0x9a,
		0x0e, 0x9b, 0xcb, 0xf6, 0xc9, 0xa5, 0x2b, 0x23, 0x31, 0xc5, 0x99, 0x33, 0xa6, 0x98, 0xdb, 0x5a,
		0x98, 0xe2, 0x7f, 0x65, 0x60, 0x63, 0xc9, 0x59, 0xb1, 0xb4, 0x93, 0x1f, 0x43, 0x5e, 0xa4, 0xa8,
		0x38, 0x3d, 0xaf, 0x2d, 0x3d, 0x74, 0x78, 0xc2, 0x2e, 0x9c, 0xa0, 0x5c, 0x2f, 0x59, 0x41, 0x64,
		0xcf, 0xa8, 0x20, 0x98, 0x89, 0x85, 0x3d, 0xfd, 0x17, 0x0b, 0x7b, 0xba, 0x38, 0xf6, 0xee, 0x9c,
		0xe7, 0xd8, 0xe3, 0xd8, 0xb7, 0xdb, 0xdb, 0xf3, 0x4b, 0xf6, 0xf6, 0x7b, 0xb0, 0xbe, 0x60, 0xe8,
		0xdc, 0x7b, 0xec, 0xaf, 0x24, 0x90, 0xcf, 0x0a, 0xce, 0x73, 0x76, 0xba, 0x4c, 0x6a, 0xa7, 0xbb,
		0x37, 0x1f, 0xc1, 0x2b, 0x67, 0x4f, 0xc2, 0xc2, 0x5c, 0x7f, 0x25, 0xc1, 0x85, 0xe5, 0x95, 0xe2,
		0x52, 0x1f, 0x3e, 0x82, 0xc2, 0x84, 0x06, 0x63, 0x27, 0xaa, 0x96, 0xde, 0x5e, 0x72, 0x06, 0x33,
		0xf1, 0xfc, 0x64, 0x87, 0x5a, 0xc9, 0x43, 0x3c, 0x7b, 0x56, 0xb9, 0x27, 0xbc, 0x59, 0xf0, 0xf4,
		0xd7, 0x19, 0x78, 0x79, 0xa9, 0xf1, 0xa5, 0x8e, 0xbe, 0x06, 0x60, 0xda, 0xee, 0x34, 0x10, 0x15,
		0x91, 0xd8, 0x60, 0x4b, 0x1c, 0xe1, 0x9b, 0x17, 0xdb, 0x3c, 0xa7, 0x41, 0x2c, 0xcf, 0x72, 0x39,
		0x08, 0x88, 0x13, 0xee, 0xce, 0x1c, 0xcd, 0x71, 0x47, 0x5f, 0x3f, 0x63, 0xa4, 0x0b, 0x89, 0xf9,
		0x1e, 0x20, 0xdd, 0x32, 0xa9, 0x1d, 0x68, 0x7e, 0xe0, 0x51, 0x32, 0x31, 0xed, 0x11, 0x3f, 0x41,
		0x8a, 0x7b, 0xf9, 0x21, 0xb1, 0x7c, 0xaa, 0xae, 0x09, 0x71, 0x3f, 0x92, 0x32, 0x0d, 0x9e, 0x40,
		0x5e, 0x42, 0xa3, 0x90, 0xd2, 0x10, 0xe2, 0x58, 0xa3, 0xf6, 0xdb, 0x12, 0x94, 0x13, 0x75, 0x35,
		0xbe, 0x02, 0x95, 0x87, 0xe4, 0x31, 0xd1, 0xa2, 0xbb, 0x92, 0x88, 0x44, 0x99, 0x61, 0xbd, 0xf0,
		0xbe, 0xf4, 0x1e, 0x6c, 0x72, 0x8a, 0x33, 0x0d, 0xa8, 0xa7, 0xe9, 0x16, 0xf1, 0x7d, 0x1e, 0xb4,
		0x22, 0xa7, 0x62, 0x26, 0xeb, 0x32, 0x51, 0x33, 0x92, 0xe0, 0xdb, 0xb0, 0xc1, 0x35, 0x26, 0x53,
		0x2b, 0x30, 0x5d, 0x8b, 0x6a, 0xec, 0xf6, 0xe6, 0xf3, 0x93, 0x24, 0xf6, 0x6c, 0x9d, 0x31, 0x8e,
		0x42, 0x02, 0xf3, 0xc8, 0xc7, 0x2d, 0x78, 0x8d, 0xab, 0x8d, 0xa8, 0x4d, 0x3d, 0x12, 0x50, 0x8d,
		0x7e, 0x31, 0x25, 0x96, 0xaf, 0x11, 0xdb, 0xd0, 0xc6, 0xc4, 0x1f, 0xcb, 0x9b, 0xcc, 0xc0, 0x7e,
		0x46, 0x96, 0xd4, 0x4b, 0x8c, 0x78, 0x10, 0xf2, 0x14, 0x4e, 0x6b, 0xd8, 0xc6, 0xc7, 0xc4, 0x1f,
		0xe3, 0x3d, 0xb8, 0xc0, 0xad, 0xf8, 0x81, 0x67, 0xda, 0x23, 0x4d, 0x1f, 0x53, 0xfd, 0x91, 0x36,
		0x0d, 0x86, 0x77, 0xe5, 0x57, 0x92, 0xfd, 0x73, 0x0f, 0xfb, 0x9c, 0xd3, 0x64, 0x94, 0xe3, 0x60,
		0x78, 0x17, 0xf7, 0xa1, 0xc2, 0x26, 0x63, 0x62, 0x7e, 0x49, 0xb5, 0xa1, 0xe3, 0xf1, 0xa3, 0xb1,
		0xba, 0x64, 0x6b, 0x4a, 0x44, 0xb0, 0xde, 0x0d, 0x15, 0x8e, 0x1c, 0x83, 0xee, 0xe5, 0xfb, 0x3d,
		0x45, 0x69, 0xa9, 0xe5, 0xc8, 0xca, 0x7d, 0xc7, 0x63, 0x09, 0x35, 0x72, 0xe2, 0x00, 0x97, 0x45,
		0x42, 0x8d, 0x9c, 0x28, 0xbc, 0xb7, 0x61, 0x43, 0xd7, 0xc5, 0x98, 0x4d, 0x5d, 0x0b, 0xef, 0x58,
		0xbe, 0x8c, 0x52, 0xc1, 0xd2, 0xf5, 0x03, 0x41, 0x08, 0x73, 0xdc, 0xc7, 0x1f, 0xc2, 0xcb, 0xb3,
		0x60, 0x25, 0x15, 0xd7, 0x17, 0x46, 0x39, 0xaf, 0x7a, 0x1b, 0x36, 0xdc, 0xd3, 0x45, 0x45, 0x9c,
		0xea, 0xd1, 0x3d, 0x9d, 0x57, 0xfb, 0x00, 0x36, 0xdd, 0xb1, 0xbb, 0xa8, 0x77, 0x3d, 0xa9, 0x87,
		0xdd, 0xb1, 0x3b, 0xaf, 0xf8, 0x16, 0xbf, 0x70, 0x7b, 0x54, 0x27, 0x01, 0x35, 0xe4, 0x8b, 0x49,
		0x7a, 0x42, 0x80, 0x77, 0x01, 0xe9, 0xba, 0x46, 0x6d, 0x72, 0x62, 0x51, 0x8d, 0x78, 0xd4, 0x26,
		0xbe, 0x7c, 0x39, 0x49, 0xae, 0xea, 0xba, 0xc2, 0xa5, 0x0d, 0x2e, 0xc4, 0xd7, 0x61, 0xdd, 0x39,
		0x79, 0xa8, 0x8b, 0x94, 0xd4, 0x5c, 0x8f, 0x0e, 0xcd, 0xa7, 0xf2, 0x9b, 0x3c, 0xbe, 0x6b, 0x4c,
		0xc0, 0x13, 0xb2, 0xc7, 0x61, 0x7c, 0x0d, 0x90, 0xee, 0x8f, 0x89, 0xe7, 0xf2, 0x3d, 0xd9, 0x77,
		0x89, 0x4e, 0xe5, 0xb7, 0x04, 0x55, 0xe0, 0x9d, 0x08, 0x66, 0x4b, 0xc2, 0x7f, 0x62, 0x0e, 0x83,
		0xc8, 0xe2, 0x55, 0xb1, 0x24, 0x38, 0x16, 0x5a, 0xdb, 0x01, 0xc4, 0x42, 0x91, 0xea, 0x78, 0x87,
		0xd3, 0xaa, 0xee, 0xd8, 0x4d, 0xf6, 0xfb, 0x06, 0xac, 0x32, 0xe6, 0xac, 0xd3, 0x6b, 0xa2, 0x20,
		0x73, 0xc7, 0x89, 0x1e, 0x6f, 0xc1, 0x05, 0x46, 0x9a, 0xd0, 0x80, 0x18, 0x24, 0x20, 0x09, 0xf6,
		0xbb, 0x9c, 0xcd, 0xe2, 0x7e, 0x14, 0x0a, 0x53, 0x7e, 0x7a, 0xd3, 0x93, 0xd3, 0x38, 0xb3, 0x6e,
		0x08, 0x3f, 0x19, 0x16, 0xe5, 0xd6, 0xf7, 0x56, 0x74, 0xd7, 0xf6, 0xa0, 0x92, 0x4c, 0x7c, 0x5c,
		0x02, 0x91, 0xfa, 0x48, 0x62, 0x55, 0x50, 0xb3, 0xdb, 0x62, 0xf5, 0xcb, 0xe7, 0x0a, 0xca, 0xb0,
		0x3a, 0xea, 0xb0, 0x3d, 0x50, 0x34, 0xf5, 0xb8, 0x33, 0x68, 0x1f, 0x29, 0x28, 0x9b, 0x28, 0xd8,
		0x1f, 0xe4, 0x8a, 0x6f, 0xa3, 0xab, 0xb5, 0xaf, 0x33, 0x50, 0x4d, 0xdf, 0xc0, 0xf0, 0x8f, 0xe0,
		0x62, 0xf4, 0x5c, 0xe2, 0xd3, 0x40, 0x7b, 0x62, 0x7a, 0x7c, 0x45, 0x4e, 0x88, 0x38, 0x1d, 0xe3,
		0x9c, 0xd8, 0x0c, 0x59, 0x7d, 0x1a, 0x7c, 0x62, 0x7a, 0x6c, 0xbd, 0x4d, 0x48, 0x80, 0x0f, 0xe1,
		0xb2, 0xed, 0x68, 0x7e, 0x40, 0x6c, 0x83, 0x78, 0x86, 0x36, 0x7b, 0xa8, 0xd2, 0x88, 0xae, 0x53,
		0xdf, 0x77, 0xc4, 0x49, 0x18, 0x5b, 0x79, 0xd5, 0x76, 0xfa, 0x21, 0x79, 0x76, 0x44, 0x34, 0x42,
		0xea, 0x5c, 0xfe, 0x66, 0xcf, 0xca, 0xdf, 0x57, 0xa0, 0x34, 0x21, 0xae, 0x46, 0xed, 0xc0, 0x3b,
		0xe5, 0x75, 0x77, 0x51, 0x2d, 0x4e, 0x88, 0xab, 0xb0, 0xf6, 0x0b, 0xb9, 0xfe, 0x3c, 0xc8, 0x15,
		0x8b, 0xa8, 0xf4, 0x20, 0x57, 0x2c, 0x21, 0xa8, 0xfd, 0x33, 0x0b, 0x95, 0x64, 0x1d, 0xce, 0xae,
		0x35, 0x3a, 0x3f, 0xb2, 0x24, 0xbe, 0xa9, 0xbd, 0xf1, 0x8d, 0x55, 0x7b, 0xbd, 0xc9, 0xce, 0xb2,
		0xbd, 0x82, 0xa8, 0x8e, 0x55, 0xa1, 0xc9, 0xea, 0x08, 0x96, 0x6c, 0x54, 0x54, 0x23, 0x45, 0x35,
		0x6c, 0xe1, 0x03, 0x28, 0x3c, 0xf4, 0xb9, 0xed, 0x02, 0xb7, 0xfd, 0xe6, 0x37, 0xdb, 0x7e, 0xd0,
		0xe7, 0xc6, 0x4b, 0x0f, 0xfa, 0x5a, 0xa7, 0xab, 0x1e, 0x35, 0x0e, 0xd5, 0x50, 0x1d, 0x5f, 0x82,
		0x9c, 0x45, 0xbe, 0x3c, 0x4d, 0x9f, 0x7a, 0x1c, 0x3a, 0xef, 0x24, 0x5c, 0x82, 0xdc, 0x13, 0x4a,
		0x1e, 0xa5, 0xcf, 0x1a, 0x0e, 0x7d, 0x8f, 0x8b, 0x61, 0x17, 0xf2, 0x3c, 0x5e, 0x18, 0x20, 0x8c,
		0x18, 0x7a, 0x09, 0x17, 0x21, 0xd7, 0xec, 0xaa, 0x6c, 0x41, 0x20, 0xa8, 0x08, 0x54, 0xeb, 0xb5,
		0x95, 0xa6, 0x82, 0x32, 0xb5, 0xdb, 0x50, 0x10, 0x41, 0x60, 0x8b, 0x25, 0x0e, 0x03, 0x7a, 0x29,
		0x6c, 0x86, 0x36, 0xa4, 0x48, 0x7a, 0x7c, 0xb4, 0xaf, 0xa8, 0x28, 0x93, 0x9e, 0xea, 0x1c, 0xca,
		0xd7, 0x7c, 0xa8, 0x24, 0x0b, 0xf1, 0x17, 0x73, 0xc9, 0xfe, 0x9b, 0x04, 0xe5, 0x44, 0x61, 0xcd,
		0x2a, 0x22, 0x62, 0x59, 0xce, 0x13, 0x8d, 0x58, 0x26, 0xf1, 0xc3, 0xd4, 0x00, 0x0e, 0x35, 0x18,
		0x72, 0xde, 0xa9, 0x7b, 0x41, 0x4b, 0x24, 0x8f, 0x0a, 0xb5, 0x3f, 0x4a, 0x80, 0xe6, 0x2b, 0xdb,
		0x39, 0x37, 0xa5, 0x1f, 0xd2, 0xcd, 0xda, 0x1f, 0x24, 0xa8, 0xa6, 0xcb, 0xd9, 0x39, 0xf7, 0xae,
		0xfc, 0xa0, 0xee, 0xfd, 0x23, 0x03, 0xab, 0xa9, 0x22, 0xf6, 0xbc, 0xde, 0x7d, 0x01, 0xeb, 0xa6,
		0x41, 0x27, 0xae, 0x13, 0x50, 0x5b, 0x3f, 0xd5, 0x2c, 0xfa, 0x98, 0x5a, 0x72, 0x8d, 0x6f, 0x1a,
		0xbb, 0xdf, 0x5c, 0x26, 0xd7, 0xdb, 0x33, 0xbd, 0x43, 0xa6, 0xb6, 0xb7, 0xd1, 0x6e, 0x29, 0x47,
		0xbd, 0xee, 0x40, 0xe9, 0x34, 0x3f, 0xd3, 0x8e, 0x3b, 0x3f, 0xed, 0x74, 0x3f, 0xe9, 0xa8, 0xc8,
		0x9c, 0xa3, 0x7d, 0x8f, 0xcb, 0xbe, 0x07, 0x68, 0xde, 0x29, 0x7c, 0x11, 0x96, 0xb9, 0x85, 0x5e,
		0xc2, 0x1b, 0xb0, 0xd6, 0xe9, 0x6a, 0xfd, 0x76, 0x4b, 0xd1, 0x94, 0xfb, 0xf7, 0x95, 0xe6, 0xa0,
		0x2f, 0x1e, 0x3e, 0x62, 0xf6, 0x20, 0xb5, 0xc0, 0x6b, 0xbf, 0xcf, 0xc2, 0xc6, 0x12, 0x4f, 0x70,
		0x23, 0xbc, 0xb2, 0x88, 0x5b, 0xd4, 0x8d, 0xf3, 0x78, 0x5f, 0x67, 0x35, 0x43, 0x8f, 0x78, 0x41,
		0x78, 0xc3, 0xb9, 0x06, 0x2c, 0x4a, 0x76, 0x60, 0x0e, 0x4d, 0xea, 0x85, 0xef, 0x44, 0xe2, 0x1e,
		0xb3, 0x36, 0xc3, 0xc5, 0x53, 0xd1, 0xbb, 0x80, 0x5d, 0xc7, 0x37, 0x03, 0xf3, 0x31, 0xd5, 0x4c,
		0x3b, 0x7a, 0x54, 0x62, 0xf7, 0x9a, 0x9c, 0x8a, 0x22, 0x49, 0xdb, 0x0e, 0x62, 0xb6, 0x4d, 0x47,
		0x64, 0x8e, 0xcd, 0x36, 0xf3, 0xac, 0x8a, 0x22, 0x49, 0xcc, 0xbe, 0x02, 0x15, 0xc3, 0x99, 0xb2,
		0x62, 0x4f, 0xf0, 0xd8, 0xd9, 0x21, 0xa9, 0x65, 0x81, 0xc5, 0x94, 0xb0, 0x8c, 0x9f, 0xbd, 0x66,
		0x55, 0xd4, 0xb2, 0xc0, 0x04, 0xe5, 0x2a, 0xac, 0x91, 0xd1, 0xc8, 0x63, 0xc6, 0x23, 0x43, 0xe2,
		0x62, 0x52, 0x8d, 0x61, 0x4e, 0xdc, 0x7a, 0x00, 0xc5, 0x28, 0x0e, 0xec, 0xa8, 0x66, 0x91, 0xd0,
		0x5c, 0x71, 0xdb, 0xce, 0xec, 0x94, 0xd4, 0xa2, 0x1d, 0x09, 0xaf, 0x40, 0xc5, 0xf4, 0xb5, 0xd9,
		0xe3, 0x7c, 0x66, 0x3b, 0xb3, 0x53, 0x54, 0xcb, 0xa6, 0x1f, 0x3f, 0x6c, 0xd6, 0xbe, 0xca, 0x40,
		0x35, 0xfd, 0x71, 0x01, 0xb7, 0xa0, 0x68, 0x39, 0x3a, 0xe1, 0xa9, 0x25, 0xbe, 0x6c, 0xed, 0x3c,
		0xe7, 0x7b, 0x44, 0xfd, 0x30, 0xe4, 0xab, 0xb1, 0xe6, 0xd6, 0xdf, 0x25, 0x28, 0x46, 0x30, 0xbe,
		0x00, 0x39, 0x97, 0x04, 0x63, 0x6e, 0x2e, 0xbf, 0x9f, 0x41, 0x92, 0xca, 0xdb, 0x0c, 0xf7, 0x5d,
		0x62, 0xf3, 0x14, 0x08, 0x71, 0xd6, 0x66, 0xf3, 0x6a, 0x51, 0x62, 0xf0, 0x5b, 0x8f, 0x33, 0x99,
		0x50, 0x3b, 0xf0, 0xa3, 0x79, 0x0d, 0xf1, 0x66, 0x08, 0xe3, 0x77, 0x60, 0x3d, 0xf0, 0x88, 0x69,
		0xa5, 0xb8, 0x39, 0xce, 0x45, 0x91, 0x20, 0x26, 0xef, 0xc1, 0xa5, 0xc8, 0xae, 0x41, 0x03, 0xa2,
		0x8f, 0xa9, 0x31, 0x53, 0x2a, 0xf0, 0xd7, 0x8d, 0x8b, 0x21, 0xa1, 0x15, 0xca, 0x23, 0xdd, 0xda,
		0xd7, 0x12, 0xac, 0x47, 0xf7, 0x34, 0x23, 0x0e, 0xd6, 0x11, 0x00, 0xb1, 0x6d, 0x27, 0x48, 0x86,
		0x6b, 0x31, 0x95, 0x17, 0xf4, 0xea, 0x8d, 0x58, 0x49, 0x4d, 0x18, 0xd8, 0x9a, 0x00, 0xcc, 0x24,
		0x67, 0x86, 0xed, 0x32, 0x94, 0xc3, 0x2f, 0x47, 0xfc, 0xf3, 0xa3, 0xb8, 0xd9, 0x83, 0x80, 0xd8,
		0x85, 0x0e, 0x6f, 0x42, 0xfe, 0x84, 0x8e, 0x4c, 0x3b, 0x7c, 0x0f, 0x16, 0x8d, 0xe8, 0xfd, 0x25,
		0x17, 0xbf, 0xbf, 0xec, 0xff, 0x46, 0x82, 0x0d, 0xdd, 0x99, 0xcc, 0xfb, 0xbb, 0x8f, 0xe6, 0x9e,
		0x17, 0xfc, 0x8f, 0xa5, 0xcf, 0x3f, 0x1a, 0x99, 0xc1, 0x78, 0x7a, 0x52, 0xd7, 0x9d, 0xc9, 0xee,
		0xc8, 0xb1, 0x88, 0x3d, 0x9a, 0x7d, 0x3f, 0xe5, 0x7f, 0xf4, 0x1b, 0x23, 0x6a, 0xdf, 0x18, 0x39,
		0x89, 0xaf, 0xa9, 0xf7, 0x66, 0x7f, 0xff, 0x27, 0x49, 0x7f, 0xca, 0x64, 0x0f, 0x7a, 0xfb, 0x7f,
		0xce, 0x6c, 0x1d, 0x88, 0xee, 0x7a, 0x51, 0x78, 0x54, 0x3a, 0xb4, 0xa8, 0xce, 0x86, 0xfc, 0xff,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xe8, 0xef, 0xc4, 0x9b, 0x1d, 0x00, 0x00,
	},
	// google/protobuf/duration.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x4f, 0x29, 0x2d, 0x4a,
		0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x03, 0x8b, 0x08, 0xf1, 0x43, 0xe4, 0xf5, 0x60, 0xf2, 0x4a, 0x56,
		0x5c, 0x1c, 0x2e, 0x50, 0x25, 0x42, 0x12, 0x5c, 0xec, 0xc5, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0xc5,
		0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x30, 0xae, 0x90, 0x08, 0x17, 0x6b, 0x5e, 0x62, 0x5e,
		0x7e, 0xb1, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x84, 0xe3, 0x54, 0xc3, 0x25, 0x9c, 0x9c,
		0x9f, 0xab, 0x87, 0x66, 0xa4, 0x13, 0x2f, 0xcc, 0xc0, 0x00, 0x90, 0x48, 0x00, 0x63, 0x94, 0x56,
		0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x7a, 0x7e, 0x4e, 0x62, 0x5e,
		0x3a, 0xc2, 0x7d, 0x05, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x70, 0x67, 0xfe, 0x60, 0x64, 0x5c, 0xc4,
		0xc4, 0xec, 0x1e, 0xe0, 0xb4, 0x8a, 0x49, 0xce, 0x1d, 0x62, 0x6e, 0x00, 0x54, 0xa9, 0x5e, 0x78,
		0x6a, 0x4e, 0x8e, 0x77, 0x5e, 0x7e, 0x79, 0x5e, 0x08, 0x48, 0x4b, 0x12, 0x1b, 0xd8, 0x0c, 0x63,
		0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x84, 0x30, 0xff, 0xf3, 0x00, 0x00, 0x00,
	},
	// google/protobuf/timestamp.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0xcf, 0xcf, 0x4f,
		0xcf, 0x49, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x2f, 0xc9, 0xcc, 0x4d,
		0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0xd0, 0x03, 0x0b, 0x09, 0xf1, 0x43, 0x14, 0xe8, 0xc1, 0x14, 0x28,
		0x59, 0x73, 0x71, 0x86, 0xc0, 0xd4, 0x08, 0x49, 0x70, 0xb1, 0x17, 0xa7, 0x26, 0xe7, 0xe7, 0xa5,
		0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xc1, 0xb8, 0x42, 0x22, 0x5c, 0xac, 0x79, 0x89,
		0x79, 0xf9, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x10, 0x8e, 0x53, 0x1d, 0x97, 0x70,
		0x72, 0x7e, 0xae, 0x1e, 0x9a, 0x99, 0x4e, 0x7c, 0x70, 0x13, 0x03, 0x40, 0x42, 0x01, 0x8c, 0x51,
		0xda, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0x39, 0x89,
		0x79, 0xe9, 0x08, 0x27, 0x16, 0x94, 0x54, 0x16, 0xa4, 0x16, 0x23, 0x5c, 0xfa, 0x83, 0x91, 0x71,
		0x11, 0x13, 0xb3, 0x7b, 0x80, 0xd3, 0x2a, 0x26, 0x39, 0x77, 0x88, 0xc9, 0x01, 0x50, 0xb5, 0x7a,
		0xe1, 0xa9, 0x39, 0x39, 0xde, 0x79, 0xf9, 0xe5, 0x79, 0x21, 0x20, 0x3d, 0x49, 0x6c, 0x60, 0x43,
		0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x77, 0x4a, 0x07, 0xf7, 0x00, 0x00, 0x00,
	},
	// sub/sub.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x2e, 0x4d, 0xd2,
		0x2f, 0x2e, 0x4d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2e, 0x4d, 0x52, 0x92,
		0xe6, 0x62, 0x76, 0x49, 0x2d, 0x10, 0x12, 0xe1, 0x62, 0xcd, 0x48, 0xcd, 0xc9, 0xc9, 0x97, 0x60,
		0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0x70, 0x9c, 0x64, 0xb8, 0xd8, 0x93, 0xf3, 0x73, 0xf5, 0x8a,
		0x4b, 0x93, 0x9c, 0x38, 0x82, 0x4b, 0x93, 0x02, 0x40, 0xda, 0x02, 0x18, 0xa3, 0x58, 0x8b, 0x4b,
		0x93, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0xc6, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xea, 0xd2,
		0x13, 0x85, 0x57, 0x00, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) HelloServiceYARPCClient {
			return NewHelloServiceYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) ExcitedServiceYARPCClient {
			return NewExcitedServiceYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
