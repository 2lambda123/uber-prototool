# The Protobuf version to use from https://github.com/google/protobuf/releases.
# By default use 3.6.0.
# You probably want to set this to make your builds completely reproducible.
protoc_version: 3.6.0

# Paths to exclude from protoc.
excludes:
  - path/to/a
  - path/to/b/file.proto

# Additional paths to include with -I to protoc.
# By default, the directory of the config file is included,
# or the current directory if there is no config file.
protoc_includes:
  - ../../vendor/github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis

# If not set, compile will fail if there are unused imports.
# Setting this will ignore unused imports.
allow_unused_imports: true

# Create directives.
create:
  # List of mappings from relative directory to base package.
  # This affects how packages are generated with create.
  packages:
    # This means that a file created "foo.proto" in the current directory will have package "bar".
    # A file created "a/b/foo.proto" will have package "bar.a.b".
    - directory: .
      name: bar
    # This means that a file created "idl/code.uber/a/b/c.proto" will have package "uber.a.b".
    - directory: idl/code.uber
      name: uber

# Lint directives.
lint:
  # Linter * files to ignore.
  ignore_id_to_files:
    RPC_NAMES_CAMEL_CASE:
      - path/to/foo.proto
      - path/to/bar.proto
    SYNTAX_PROTO3:
      - path/to/foo.proto

  # When specifying linters, you can only specify ids, or any combination of
  # include_ids,exclude_ids, but not ids and any of those two.
  # Run prototool list-all-linters to see all available linters.
  # All are specified just for this example.
  # By default, the default group of linters is used.

  # The specific linters to use.
  ids:
    - ENUM_NAMES_CAMEL_CASE
    - ENUM_NAMES_CAPITALIZED

  # Linters to include that are not in the default lint group.
  include_ids:
    - REQUEST_RESPONSE_NAMES_MATCH_RPC

  # Linters to exclude from the default lint group.
  exclude_ids:
    - ENUM_NAMES_CAMEL_CASE

# Code generation directives.
gen:
  # Options that will apply to all plugins of type go, gogo, gogrpc, gogogrpc.
  go_options:
    # The base import path. This should be the go path of the prototool.yaml file.
    # This is required if you have any go plugins.
    import_path: uber/foo/bar.git/idl/uber

    # Extra modifiers to include with Mfile=package.
    extra_modifiers:
      google/api/annotations.proto: google.golang.org/genproto/googleapis/api/annotations
      google/api/http.proto: google.golang.org/genproto/googleapis/api/annotations

  plugin_overrides:

  # The list of plugins.
  plugins:
      # The plugin name. This will go to protoc with --name_out, so it either needs
      # to be a built-in name (like java), or a plugin name with a binary
      # protoc-gen-name.
    - name: gogo

      # The type, if any. Valid types are go, gogo.
      # Use go if your plugin is a standard Golang plugin
      # that uses github.com/golang/protobuf imports, use gogo
      # if it uses github.com/gogo/protobuf imports. For protoc-gen-go
      # use go, For protoc-gen-gogo, protoc-gen-gogoslick, etc, use gogo.
      type: gogo

      # Extra flags to specify.
      # The only flag you will generally set is plugins=grpc for Golang.
      # The Mfile=package flags are automatically set.
      # ** Otherwise, generally do not set this unless you know what you are doing. **
      flags: plugins=grpc

      # The path to output generated files to.
      # If the directory does not exist, it will be created when running generation.
      # This needs to be a relative path.
      output: ../../.gen/proto/go

      # Optional override for the plugin path. For example, if you set set path to
      # /usr/local/bin/gogo_plugin", prototool will add the
      # "--plugin=protoc-gen-gogo=/usr/local/bin/gogo_plugin" flag to protoc calls.
      path: /usr/local/bin/gogo

    - name: yarpc-go
      type: gogo
      output: ../../.gen/proto/go

    - name: grpc-gateway
      type: go
      output: ../../.gen/proto/go

    - name: java
      output: ../../.gen/proto/java