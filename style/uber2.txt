x ENUMS_NO_ALLOW_ALIAS                                           Verifies that no enums use the option "allow_alias".
x ENUM_FIELD_NAMES_UPPER_SNAKE_CASE                              Verifies that all enum field names are UPPER_SNAKE_CASE.
x ENUM_FIELD_PREFIXES_EXCEPT_MESSAGE                             Verifies that all enum fields are prefixed with ENUM_NAME_.
x ENUM_NAMES_CAMEL_CASE                                          Verifies that all enum names are CamelCase.
x ENUM_NAMES_CAPITALIZED                                         Verifies that all enum names are Capitalized.
x ENUM_ZERO_VALUES_INVALID_EXCEPT_MESSAGE                        Verifies that all enum zero value names are ENUM_NAME_INVALID.
x FILE_HEADER                                                    Verifies that the file header matches the expected file header if the file_header option is set in the configuration file.
x FILE_NAMES_LOWER_SNAKE_CASE                                    Verifies that the file name is lower_snake_case.proto.
x FILE_OPTIONS_CSHARP_NAMESPACE_SAME_IN_DIR                      Verifies that the file option "csharp_namespace" of all files in a directory are the same.
x FILE_OPTIONS_EQUAL_CSHARP_NAMESPACE_CAPITALIZED                Verifies that the file option "csharp_namespace" is the capitalized version of the package.
x FILE_OPTIONS_EQUAL_GO_PACKAGE_V2_SUFFIX                        Verifies that the file option "go_package" is equal to the last two values of the package separated by "."s, or just the package name if there are no "."s.
x FILE_OPTIONS_EQUAL_JAVA_MULTIPLE_FILES_TRUE                    Verifies that the file option "java_multiple_files" is equal to true.
x FILE_OPTIONS_EQUAL_JAVA_OUTER_CLASSNAME_PROTO_SUFFIX           Verifies that the file option "java_outer_classname" is equal to $(upperCamelCase $(basename FILE))Proto.
x FILE_OPTIONS_EQUAL_JAVA_PACKAGE_PREFIX                         Verifies that the file option "java_package" is equal to PREFIX.PACKAGE, with PREFIX defaulting to "com" and configurable in your configuration file.
x FILE_OPTIONS_EQUAL_OBJC_CLASS_PREFIX_ABBR                      Verifies that the file option "objc_class_prefix" is the abbreviated version of the package.
x FILE_OPTIONS_EQUAL_PHP_NAMESPACE_CAPITALIZED                   Verifies that the file option "php_namespace" is the capitalized version of the package.
x FILE_OPTIONS_GO_PACKAGE_NOT_LONG_FORM                          Verifies that the file option "go_package" is not of the form "go/import/path;package".
x FILE_OPTIONS_GO_PACKAGE_SAME_IN_DIR                            Verifies that the file option "go_package" of all files in a directory are the same.
x FILE_OPTIONS_JAVA_MULTIPLE_FILES_SAME_IN_DIR                   Verifies that the file option "java_multiple_files" of all files in a directory are the same.
x FILE_OPTIONS_JAVA_PACKAGE_SAME_IN_DIR                          Verifies that the file option "java_package" of all files in a directory are the same.
x FILE_OPTIONS_OBJC_CLASS_PREFIX_SAME_IN_DIR                     Verifies that the file option "objc_class_prefix" of all files in a directory are the same.
x FILE_OPTIONS_PHP_NAMESPACE_SAME_IN_DIR                         Verifies that the file option "php_namespace" of all files in a directory are the same.
x FILE_OPTIONS_REQUIRE_CSHARP_NAMESPACE                          Verifies that the file option "csharp_namespace" is set.
x FILE_OPTIONS_REQUIRE_GO_PACKAGE                                Verifies that the file option "go_package" is set.
x FILE_OPTIONS_REQUIRE_JAVA_MULTIPLE_FILES                       Verifies that the file option "java_multiple_files" is set.
x FILE_OPTIONS_REQUIRE_JAVA_OUTER_CLASSNAME                      Verifies that the file option "java_outer_classname" is set.
x FILE_OPTIONS_REQUIRE_JAVA_PACKAGE                              Verifies that the file option "java_package" is set.
x FILE_OPTIONS_REQUIRE_OBJC_CLASS_PREFIX                         Verifies that the file option "objc_class_prefix" is set.
x FILE_OPTIONS_REQUIRE_PHP_NAMESPACE                             Verifies that the file option "php_namespace" is set.
x IMPORTS_NOT_PUBLIC                                             Verifies that there are no public imports.
x IMPORTS_NOT_WEAK                                               Verifies that there are no weak imports.
x PACKAGES_SAME_IN_DIR                                           Verifies that the packages of all files in a directory are the same.
x PACKAGE_IS_DECLARED                                            Verifies that there is a package declaration.
x PACKAGE_LOWER_CASE                                             Verifies that the package name only contains characters in the range a-z0-9 and periods.
x PACKAGE_MAJOR_BETA_VERSIONED                                   Verifies that the package is of the form "package.vMAJORVERSION" or "package.vMAJORVERSIONbetaBETAVERSION" with versions >=1.
x PACKAGE_NO_KEYWORDS                                            Verifies that no packages contain one of the keywords "internal,public,private,protected,std" as part of the name when split on '.'.
x REQUEST_RESPONSE_TYPES_AFTER_SERVICE                           Verifies that request and response types are defined after any services and the response type is defined after the request type.
x REQUEST_RESPONSE_TYPES_IN_SAME_FILE                            Verifies that all request and response types are in the same file as their corresponding service and are not nested messages.
x REQUEST_RESPONSE_TYPES_ONLY_IN_FILE                            Verifies that only request and response types are the only types in the same file as their corresponding service.
x SYNTAX_PROTO3                                                  Verifies that the syntax is proto3.
x MESSAGE_NAMES_CAMEL_CASE                                       Verifies that all non-extended message names are CamelCase.
x MESSAGE_NAMES_CAPITALIZED                                      Verifies that all non-extended message names are Capitalized.
x MESSAGE_FIELD_NAMES_LOWER_SNAKE_CASE                           Verifies that all message field names are lower_snake_case.
x MESSAGE_FIELD_NAMES_NO_DESCRIPTOR                              Verifies that all message field names are not "descriptor", which results in a collision in Java-generated code.
x MESSAGE_FIELD_NAMES_FILENAME                                   Verifies that all message field names do not contain "file_name" as "filename" should be used instead.
x MESSAGE_FIELD_NAMES_FILEPATH                                   Verifies that all message field names do not contain "file_path" as "filepath" should be used instead.
x WKT_DURATION_SUFFIX                                            Verifies that all google.protobuf.Duration field names are "duration" or end in "_duration".
x WKT_TIMESTAMP_SUFFIX                                           Verifies that all google.protobuf.Timestamp field names are "time" or end in "_time".
x MESSAGE_FIELDS_NO_JSON_NAME                                    Verifies that no message field has the "json_name" option set.
x WKT_DIRECTLY_IMPORTED                                          Verifies that the Well-Known Types are directly imported using "google/protobuf/" as the base of the import.
x ONEOF_NAMES_LOWER_SNAKE_CASE                                   Verifies that all oneof names are lower_snake_case.
x FIELDS_NOT_RESERVED                                            Verifies that no message or enum has a reserved field.

SERVICE_NAMES_API_SUFFIX                                       Verifies that all service names end with "API".
SERVICE_NAMES_CAMEL_CASE                                       Verifies that all service names are CamelCase.
SERVICE_NAMES_CAPITALIZED                                      Verifies that all service names are Capitalized.
SERVICE_NAMES_MATCH_FILE_NAME                                  Verifies that there is one service per file and the file name is service_name_lower_snake_case.proto.
RPC_NAMES_CAMEL_CASE                                           Verifies that all RPC names are CamelCase.
RPC_NAMES_CAPITALIZED                                          Verifies that all RPC names are Capitalized.
REQUEST_RESPONSE_NAMES_MATCH_RPC                               Verifies that all request names are RpcNameRequest and all response names are RpcNameResponse.
REQUEST_RESPONSE_TYPES_UNIQUE                                  Verifies that all request and response types are unique to each RPC.

NAMES_NO_COMMON                                                Verifies that no type name contains the word "common".
NAMES_NO_DATA                                                  Verifies that no type name contains the word "data".
NAMES_NO_UUID                                                  Verifies that no type name contains the word "uuid".

COMMENTS_NO_C_STYLE                                            Verifies that there are no /* c-style */ comments.
COMMENTS_NO_INLINE                                             Verifies that there are no inline comments.
ENUMS_HAVE_SENTENCE_COMMENTS                                   Verifies that all enums have a comment that contains at least one complete sentence.
MESSAGES_HAVE_SENTENCE_COMMENTS_EXCEPT_REQUEST_RESPONSE_TYPES  Verifies that all non-extended messages except for request and response types have a comment that contains at least one complete sentence.
RPCS_HAVE_SENTENCE_COMMENTS                                    Verifies that all rpcs have a comment that contains at least one complete sentence.
SERVICES_HAVE_SENTENCE_COMMENTS                                Verifies that all services have a comment that contains at least one complete sentence.

Resolve rpc vs service method in Prototool
